#steepest descent method
import math
from tabulate import tabulate
import numpy as np

def golden(f,a,b,tol,max_n):
  i=0
  while (b-a)>tol and i<max_n:
    x_1=b-0.618*(b-a)
    x_2=a+0.618*(b-a)
    if f(x_1) <= f(x_2):
      b=x_2
      x_2=x_1
      x_1=b-0.618*(b-a)
    else:
      a=x_1
      x_1=x_2
      x_2=a-0.618*(b-a)
    i=i+1
  return(x_1+x_2)/2

def steepest_descent(f,fx1,fx2,ip,maxN,tol):
  results=[]
  x1,x2=ip
  diff=10**10
  for i in range(maxN):
    if diff>tol:
      s1=-fx1(x1,x2)
      s2=-fx2(x1,x2)
      fd= lambda d:f(x1+d*s1,x2+d*s2)
      dstar=golden(fd,0,100000,0.0001,100)
      new_x1=x1+dstar*s1
      new_x2=x2+dstar*s2
      diff=abs(f(x1,x2)-f(new_x1,new_x2))
      results.append([i,round(x1,5),round(x2,5),round(f(x1,x2),10)])
      x1=new_x1
      x2=new_x2
    else:
      break
  return results

#contoh pemanggilan
#fungsi objektif
func=lambda x1,x2:x1-x2+2*x1**2+2*x1*x2+x2**2 
#gradien matriks
funcx1=lambda x1,x2 : 4*x1 + 2*x2 + 1
funcx2=lambda x1,x2 : 2*x1 + 2*x2 - 1
#nilai awal
p0=[0,0]
sdr=steepest_descent(func,funcx1,funcx2,p0,100,0.1)
print(tabulate(sdr,headers=['Iteration','x1','x2','f(x1,x2)']))
